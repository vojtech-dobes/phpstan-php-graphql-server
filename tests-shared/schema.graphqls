type Query {
	validNonNullString: String!
	invalidStringResolvedAsBool: String

	invalidArgumentsMismatch(arg1: String): String

	validDeferred: String

	arrayType: ArrayType!
	objectType: ObjectType!

	providerOfInvalidPersonParentTypeArray: PersonParentType!
	providerOfInvalidPersonParentTypeEntity: PersonParentType!
	providerOfInvalidPersonParentTypeThing: PersonParentType!
	providerOfValidPersonParentTypePerson: PersonParentType!

	providerOfInvalidEntityParentTypeArray: EntityParentType!
	providerOfValidEntityParentTypeEntity: EntityParentType!
	providerOfValidEntityParentTypePerson: EntityParentType!
	providerOfValidEntityParentTypeThing: EntityParentType!

	rootFieldWithParentBasedResolver: String # should be eg. PropertyFieldResolver
}

type ArrayType {
	a: String!
}

type ObjectType {
	withGetter: String!
	withProperty: String!
}

type PersonParentType {
	name: String!
}

type EntityParentType {
	name: String!
}
